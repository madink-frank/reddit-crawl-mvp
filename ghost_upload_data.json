{
  "pages": [
    {
      "title": "Working Admin Dashboard",
      "slug": "working-admin-dashboard",
      "html": "\n<!-- Working Admin Dashboard for Reddit Ghost Publisher -->\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reddit Ghost Publisher - Working Dashboard</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        .status-healthy { color: #28a745; }\n        .status-degraded { color: #ffc107; }\n        .status-unhealthy { color: #dc3545; }\n        .card-stat:hover { \n            transform: translateY(-2px); \n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            transition: all 0.3s;\n        }\n        .api-status {\n            padding: 0.5rem;\n            border-radius: 0.25rem;\n            margin-bottom: 1rem;\n        }\n        .api-healthy {\n            background-color: #d4edda;\n            border: 1px solid #c3e6cb;\n        }\n        .api-error {\n            background-color: #f8d7da;\n            border: 1px solid #f5c6cb;\n        }\n        .log-output {\n            background: #1e1e1e;\n            color: #00ff00;\n            font-family: 'Courier New', monospace;\n            font-size: 12px;\n            max-height: 200px;\n            overflow-y: auto;\n            padding: 1rem;\n            border-radius: 0.25rem;\n        }\n    </style>\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-4\">\n        <div class=\"row mb-4\">\n            <div class=\"col-md-12\">\n                <div class=\"card border-primary\">\n                    <div class=\"card-header bg-primary text-white\">\n                        <h4 class=\"mb-0\">\n                            <i class=\"fas fa-robot me-2\"></i>\n                            Reddit Ghost Publisher - Working Dashboard\n                        </h4>\n                        <small>Connected to: <span id=\"apiUrl\">https://reddit-crawl-mvp.vercel.app</span></small>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"alert alert-info\">\n                            <i class=\"fas fa-info-circle me-2\"></i>\n                            <strong>시스템 상태:</strong> Vercel Serverless Functions 연동 테스트 중\n                            <br><small>Last updated: <span id=\"currentTime\"></span></small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- API Status Section -->\n        <div class=\"row mb-4\">\n            <div class=\"col-md-12\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-server me-2\"></i>API 연결 상태</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"apiStatus\" class=\"api-status api-error\">\n                            <strong>API Status:</strong> <span id=\"apiStatusText\">테스트 중...</span>\n                            <br><small id=\"apiStatusDetails\">API 연결을 확인하는 중입니다.</small>\n                        </div>\n                        <button id=\"testApiBtn\" class=\"btn btn-primary\" onclick=\"testApiConnection()\">\n                            <i class=\"fas fa-sync me-1\"></i> API 연결 테스트\n                        </button>\n                        <button id=\"loadStatsBtn\" class=\"btn btn-success ms-2\" onclick=\"loadStats()\">\n                            <i class=\"fas fa-chart-bar me-1\"></i> 통계 불러오기\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Stats Section -->\n        <div class=\"row mb-4\">\n            <div class=\"col-md-3\">\n                <div class=\"card text-center card-stat\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title text-primary\">총 수집 포스트</h5>\n                        <h3 id=\"totalPosts\">-</h3>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"card text-center card-stat\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title text-success\">AI 처리 완료</h5>\n                        <h3 id=\"aiProcessed\">-</h3>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"card text-center card-stat\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title text-info\">발행 완료</h5>\n                        <h3 id=\"published\">-</h3>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"card text-center card-stat\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title text-warning\">성공률</h5>\n                        <h3 id=\"successRate\">-</h3>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Recent Posts Section -->\n        <div class=\"row mb-4\">\n            <div class=\"col-md-12\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-list me-2\"></i>최근 포스트</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"recentPosts\">\n                            <p class=\"text-muted\">통계를 불러와서 최근 포스트를 확인하세요.</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Actions Section -->\n        <div class=\"row mb-4\">\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-play me-2\"></i>수동 작업 실행</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <button class=\"btn btn-primary mb-2\" onclick=\"triggerCollection()\">\n                            <i class=\"fas fa-download me-1\"></i> Reddit 수집 시작\n                        </button>\n                        <br>\n                        <button class=\"btn btn-success mb-2\" onclick=\"triggerPipeline()\">\n                            <i class=\"fas fa-cogs me-1\"></i> 전체 파이프라인 실행\n                        </button>\n                        <div id=\"actionResults\" class=\"mt-3\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-terminal me-2\"></i>시스템 로그</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"systemLog\" class=\"log-output\">\n                            <div>[INFO] Dashboard loaded successfully</div>\n                            <div>[INFO] Connecting to Vercel API...</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const API_BASE_URL = 'https://reddit-crawl-mvp.vercel.app';\n\n        function updateTime() {\n            document.getElementById('currentTime').textContent = new Date().toLocaleString('ko-KR');\n        }\n\n        function addLog(message, type = 'INFO') {\n            const logDiv = document.getElementById('systemLog');\n            const timestamp = new Date().toLocaleTimeString();\n            logDiv.innerHTML += `<div>[${type}] ${timestamp}: ${message}</div>`;\n            logDiv.scrollTop = logDiv.scrollHeight;\n        }\n\n        async function testApiConnection() {\n            const btn = document.getElementById('testApiBtn');\n            const statusDiv = document.getElementById('apiStatus');\n            const statusText = document.getElementById('apiStatusText');\n            const statusDetails = document.getElementById('apiStatusDetails');\n\n            btn.disabled = true;\n            btn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> 테스트 중...';\n            \n            addLog('API 연결 테스트 시작...');\n            \n            try {\n                const response = await fetch(`${API_BASE_URL}/api/health`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                \n                const data = await response.json();\n                \n                if (response.ok && data.success) {\n                    statusDiv.className = 'api-status api-healthy';\n                    statusText.textContent = 'API 연결 성공';\n                    statusDetails.textContent = `서버 상태: ${data.data.overall_status} | 응답시간: ${Date.now() - Date.now()}ms`;\n                    addLog('API 연결 성공!', 'SUCCESS');\n                } else {\n                    throw new Error(`API 응답 오류: ${data.error || 'Unknown error'}`);\n                }\n            } catch (error) {\n                statusDiv.className = 'api-status api-error';\n                statusText.textContent = 'API 연결 실패';\n                statusDetails.textContent = error.message;\n                addLog(`API 연결 실패: ${error.message}`, 'ERROR');\n            }\n            \n            btn.disabled = false;\n            btn.innerHTML = '<i class=\"fas fa-sync me-1\"></i> API 연결 테스트';\n        }\n\n        async function loadStats() {\n            const btn = document.getElementById('loadStatsBtn');\n            btn.disabled = true;\n            btn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> 로딩 중...';\n            \n            addLog('통계 데이터 요청...');\n            \n            try {\n                const response = await fetch(`${API_BASE_URL}/api/stats`);\n                const data = await response.json();\n                \n                if (response.ok && data.success) {\n                    // Update stats\n                    document.getElementById('totalPosts').textContent = data.data.total_posts || 0;\n                    document.getElementById('aiProcessed').textContent = data.data.ai_processed || 0;\n                    document.getElementById('published').textContent = data.data.published || 0;\n                    document.getElementById('successRate').textContent = (data.data.success_rate || 0) + '%';\n                    \n                    // Update recent posts\n                    const recentPostsDiv = document.getElementById('recentPosts');\n                    if (data.data.recent_posts && data.data.recent_posts.length > 0) {\n                        let postsHtml = '<div class=\"row\">';\n                        data.data.recent_posts.forEach(post => {\n                            const statusBadge = post.published ? \n                                '<span class=\"badge bg-success\">발행됨</span>' : \n                                '<span class=\"badge bg-warning\">대기중</span>';\n                            \n                            postsHtml += `\n                                <div class=\"col-md-6 mb-3\">\n                                    <div class=\"card\">\n                                        <div class=\"card-body\">\n                                            <h6 class=\"card-title\">${post.title}</h6>\n                                            <p class=\"card-text small\">\n                                                <strong>r/${post.subreddit}</strong> | \n                                                점수: ${post.score} | \n                                                댓글: ${post.comments}\n                                                <br>\n                                                ${statusBadge}\n                                                ${post.ghost_url ? `<a href=\"${post.ghost_url}\" target=\"_blank\" class=\"ms-2\">Ghost에서 보기</a>` : ''}\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>`;\n                        });\n                        postsHtml += '</div>';\n                        recentPostsDiv.innerHTML = postsHtml;\n                    }\n                    \n                    addLog(`통계 데이터 로드 완료 (총 ${data.data.total_posts}개 포스트)`, 'SUCCESS');\n                } else {\n                    throw new Error(data.error || 'Stats API 오류');\n                }\n            } catch (error) {\n                addLog(`통계 로드 실패: ${error.message}`, 'ERROR');\n            }\n            \n            btn.disabled = false;\n            btn.innerHTML = '<i class=\"fas fa-chart-bar me-1\"></i> 통계 불러오기';\n        }\n\n        async function triggerCollection() {\n            addLog('Reddit 수집 작업 요청...');\n            \n            try {\n                const response = await fetch(`${API_BASE_URL}/api/trigger/collect`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        batch_size: 10,\n                        subreddits: ['programming', 'technology', 'webdev']\n                    })\n                });\n                \n                const data = await response.json();\n                \n                if (response.ok && data.success) {\n                    document.getElementById('actionResults').innerHTML = `\n                        <div class=\"alert alert-success\">\n                            <strong>수집 작업 시작됨:</strong><br>\n                            Task ID: ${data.data.task_id}<br>\n                            Batch Size: ${data.data.batch_size}<br>\n                            Subreddits: ${data.data.subreddits.join(', ')}\n                        </div>`;\n                    addLog(`수집 작업 시작: ${data.data.task_id}`, 'SUCCESS');\n                } else {\n                    throw new Error(data.error || 'Collection API 오류');\n                }\n            } catch (error) {\n                addLog(`수집 작업 실패: ${error.message}`, 'ERROR');\n            }\n        }\n\n        async function triggerPipeline() {\n            addLog('전체 파이프라인 실행 요청...');\n            \n            try {\n                const response = await fetch(`${API_BASE_URL}/api/trigger/pipeline`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                \n                const data = await response.json();\n                \n                if (response.ok && data.success) {\n                    document.getElementById('actionResults').innerHTML = `\n                        <div class=\"alert alert-success\">\n                            <strong>파이프라인 실행됨:</strong><br>\n                            Task ID: ${data.data.task_id}<br>\n                            Status: ${data.data.status}\n                        </div>`;\n                    addLog(`파이프라인 실행: ${data.data.task_id}`, 'SUCCESS');\n                } else {\n                    throw new Error(data.error || 'Pipeline API 오류');\n                }\n            } catch (error) {\n                addLog(`파이프라인 실행 실패: ${error.message}`, 'ERROR');\n            }\n        }\n\n        // Initialize\n        updateTime();\n        setInterval(updateTime, 1000);\n        \n        // Auto-test API on load\n        setTimeout(() => {\n            testApiConnection();\n        }, 1000);\n\n        addLog('Working Dashboard 초기화 완료');\n    </script>\n</body>\n</html>\n<!-- End of Dashboard -->\n",
      "status": "published",
      "visibility": "public",
      "meta_title": "Reddit Ghost Publisher - Working Dashboard",
      "meta_description": "Fully functional admin dashboard with real-time API integration",
      "custom_excerpt": "Working admin dashboard with Vercel API integration for Reddit Ghost Publisher system monitoring and control.",
      "created_at": "2025-08-18T17:56:46.768068",
      "updated_at": "2025-08-18T17:56:46.768085"
    }
  ]
}