name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine deployment environment
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
        
        # Check if we should deploy
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          # Check if CI passed
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Verify Docker images exist
      run: |
        docker manifest inspect ${{ env.DOCKER_REGISTRY }}/reddit-publisher:${{ env.IMAGE_TAG }} || exit 1
        docker manifest inspect ${{ env.DOCKER_REGISTRY }}/reddit-publisher-worker:${{ env.IMAGE_TAG }} || exit 1
        docker manifest inspect ${{ env.DOCKER_REGISTRY }}/reddit-publisher-scheduler:${{ env.IMAGE_TAG }} || exit 1

  deploy:
    name: Deploy to ${{ needs.pre-deploy-checks.outputs.environment }}
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    environment: ${{ needs.pre-deploy-checks.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create deployment directory
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          mkdir -p /opt/reddit-publisher/deployments/${{ env.IMAGE_TAG }}
          mkdir -p /opt/reddit-publisher/backups
        "
    
    - name: Copy deployment files
      run: |
        scp -r docker-compose.prod.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/opt/reddit-publisher/deployments/${{ env.IMAGE_TAG }}/
        scp -r docker/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/opt/reddit-publisher/deployments/${{ env.IMAGE_TAG }}/
        scp -r scripts/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/opt/reddit-publisher/deployments/${{ env.IMAGE_TAG }}/
    
    - name: Create environment file
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cat > /opt/reddit-publisher/deployments/${{ env.IMAGE_TAG }}/.env << 'EOF'
          # Application Configuration
          ENVIRONMENT=${{ needs.pre-deploy-checks.outputs.environment }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          
          # Database Configuration
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          
          # External Services
          VAULT_URL=${{ secrets.VAULT_URL }}
          VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}
          
          # Monitoring
          PROMETHEUS_URL=${{ secrets.PROMETHEUS_URL }}
          GRAFANA_URL=${{ secrets.GRAFANA_URL }}
          
          # Notifications
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          
          # Watchtower Configuration
          WATCHTOWER_POLL_INTERVAL=300
          WATCHTOWER_CLEANUP=true
          WATCHTOWER_INCLUDE_RESTARTING=true
          EOF
        "
    
    - name: Backup current deployment
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher
          if [ -L current ]; then
            CURRENT_DEPLOYMENT=\$(readlink current)
            BACKUP_NAME=\"backup-\$(date +%Y%m%d-%H%M%S)\"
            cp -r \$CURRENT_DEPLOYMENT backups/\$BACKUP_NAME
            echo \"Backup created: \$BACKUP_NAME\"
          fi
        "
    
    - name: Pre-deployment health check
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher
          if [ -f current/docker-compose.prod.yml ]; then
            docker-compose -f current/docker-compose.prod.yml ps --services --filter 'status=running' > /tmp/running_services.txt
            echo 'Current running services:'
            cat /tmp/running_services.txt
          fi
        "
    
    - name: Deploy new version
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher
          
          # Update symlink to new deployment
          ln -sfn deployments/${{ env.IMAGE_TAG }} current
          
          # Navigate to current deployment
          cd current
          
          # Pull latest images
          docker-compose -f docker-compose.prod.yml pull
          
          # Run database migrations
          docker-compose -f docker-compose.prod.yml run --rm api alembic upgrade head
          
          # Start services with rolling update
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Wait for services to be ready
          sleep 30
        "
    
    - name: Post-deployment health check
      id: health_check
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher/current
          
          # Check if all services are running
          EXPECTED_SERVICES=\$(docker-compose -f docker-compose.prod.yml config --services | wc -l)
          RUNNING_SERVICES=\$(docker-compose -f docker-compose.prod.yml ps --services --filter 'status=running' | wc -l)
          
          echo \"Expected services: \$EXPECTED_SERVICES\"
          echo \"Running services: \$RUNNING_SERVICES\"
          
          if [ \$RUNNING_SERVICES -lt \$EXPECTED_SERVICES ]; then
            echo 'Not all services are running!'
            docker-compose -f docker-compose.prod.yml ps
            exit 1
          fi
          
          # Health check API endpoint
          for i in {1..10}; do
            if curl -f http://localhost:8000/health; then
              echo 'Health check passed'
              break
            else
              echo \"Health check attempt \$i failed, retrying...\"
              sleep 10
            fi
            
            if [ \$i -eq 10 ]; then
              echo 'Health check failed after 10 attempts'
              exit 1
            fi
          done
        "
    
    - name: Rollback on failure
      if: failure() && steps.health_check.outcome == 'failure'
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher
          
          # Find the most recent backup
          LATEST_BACKUP=\$(ls -t backups/ | head -n1)
          
          if [ -n \"\$LATEST_BACKUP\" ]; then
            echo \"Rolling back to: \$LATEST_BACKUP\"
            
            # Stop current services
            cd current
            docker-compose -f docker-compose.prod.yml down
            
            # Restore backup
            cd ..
            ln -sfn backups/\$LATEST_BACKUP current
            
            # Start restored services
            cd current
            docker-compose -f docker-compose.prod.yml up -d
            
            echo 'Rollback completed'
          else
            echo 'No backup found for rollback'
            exit 1
          fi
        "
    
    - name: Update Watchtower labels
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher/current
          
          # Update container labels for Watchtower monitoring
          docker-compose -f docker-compose.prod.yml config | \
          sed 's/image: /image: /g' | \
          docker-compose -f - up -d --no-deps watchtower
        "
    
    - name: Cleanup old deployments
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /opt/reddit-publisher/deployments
          
          # Keep only the 5 most recent deployments
          ls -t | tail -n +6 | xargs -r rm -rf
          
          # Cleanup old backups (keep 10 most recent)
          cd ../backups
          ls -t | tail -n +11 | xargs -r rm -rf
          
          # Cleanup unused Docker images
          docker image prune -f
        "
    
    - name: Send deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Deployment to ${{ needs.pre-deploy-checks.outputs.environment }} ${{ job.status }}
          
          **Details:**
          - Environment: ${{ needs.pre-deploy-checks.outputs.environment }}
          - Image Tag: ${{ env.IMAGE_TAG }}
          - Commit: ${{ github.sha }}
          - Triggered by: ${{ github.actor }}
          
          ${{ job.status == 'success' && '✅ All services are healthy' || '❌ Deployment failed - check logs' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  smoke-tests:
    name: Post-deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy, pre-deploy-checks]
    if: needs.deploy.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        pip install requests pytest
    
    - name: Run smoke tests
      run: |
        python -m pytest tests/e2e/smoke_tests.py -v --tb=short
      env:
        API_BASE_URL: ${{ secrets.API_BASE_URL }}
        API_KEY: ${{ secrets.API_KEY }}
    
    - name: Notify smoke test results
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🧪 Smoke tests ${{ job.status }} for ${{ needs.pre-deploy-checks.outputs.environment }}
          ${{ job.status == 'success' && '✅ All critical paths verified' || '❌ Some smoke tests failed' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}