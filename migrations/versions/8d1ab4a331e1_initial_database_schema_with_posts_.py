"""Initial database schema with posts, media_files, processing_logs, and token_usage tables

Revision ID: 8d1ab4a331e1
Revises: 
Create Date: 2025-08-05 08:09:37.418077

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8d1ab4a331e1'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('posts',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('subreddit', sa.String(length=100), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('comments', sa.Integer(), nullable=False),
    sa.Column('created_ts', sa.DateTime(), nullable=False),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('author', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('summary_ko', sa.Text(), nullable=True),
    sa.Column('topic_tag', sa.String(length=200), nullable=True),
    sa.Column('pain_points', sa.JSON(), nullable=True),
    sa.Column('product_ideas', sa.JSON(), nullable=True),
    sa.Column('ghost_url', sa.Text(), nullable=True),
    sa.Column('ghost_id', sa.String(length=100), nullable=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('velocity_score', sa.DECIMAL(precision=10, scale=4), nullable=True),
    sa.Column('processing_attempts', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("status IN ('collected', 'processing', 'processed', 'published', 'failed')", name='check_post_status'),
    sa.CheckConstraint('comments >= 0', name='check_post_comments_positive'),
    sa.CheckConstraint('processing_attempts >= 0', name='check_processing_attempts_positive'),
    sa.CheckConstraint('score >= 0', name='check_post_score_positive'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_posts_created_ts', 'posts', ['created_ts'], unique=False)
    op.create_index('idx_posts_published_at', 'posts', ['published_at'], unique=False)
    op.create_index('idx_posts_score', 'posts', ['score'], unique=False)
    op.create_index('idx_posts_status', 'posts', ['status'], unique=False)
    op.create_index('idx_posts_subreddit', 'posts', ['subreddit'], unique=False)
    op.create_index('idx_posts_velocity_score', 'posts', ['velocity_score'], unique=False)
    op.create_table('media_files',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.String(length=50), nullable=False),
    sa.Column('original_url', sa.Text(), nullable=False),
    sa.Column('ghost_url', sa.Text(), nullable=True),
    sa.Column('file_type', sa.String(length=50), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_media_files_file_type', 'media_files', ['file_type'], unique=False)
    op.create_index('idx_media_files_post_id', 'media_files', ['post_id'], unique=False)
    op.create_index('idx_media_files_processed_at', 'media_files', ['processed_at'], unique=False)
    op.create_table('processing_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.String(length=50), nullable=False),
    sa.Column('service_name', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_processing_logs_created_at', 'processing_logs', ['created_at'], unique=False)
    op.create_index('idx_processing_logs_post_id', 'processing_logs', ['post_id'], unique=False)
    op.create_index('idx_processing_logs_service_name', 'processing_logs', ['service_name'], unique=False)
    op.create_index('idx_processing_logs_status', 'processing_logs', ['status'], unique=False)
    op.create_table('token_usage',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.String(length=50), nullable=False),
    sa.Column('service', sa.String(length=50), nullable=False),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('cost_usd', sa.DECIMAL(precision=10, scale=6), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_token_usage_cost_usd', 'token_usage', ['cost_usd'], unique=False)
    op.create_index('idx_token_usage_created_at', 'token_usage', ['created_at'], unique=False)
    op.create_index('idx_token_usage_post_id', 'token_usage', ['post_id'], unique=False)
    op.create_index('idx_token_usage_service', 'token_usage', ['service'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_token_usage_service', table_name='token_usage')
    op.drop_index('idx_token_usage_post_id', table_name='token_usage')
    op.drop_index('idx_token_usage_created_at', table_name='token_usage')
    op.drop_index('idx_token_usage_cost_usd', table_name='token_usage')
    op.drop_table('token_usage')
    op.drop_index('idx_processing_logs_status', table_name='processing_logs')
    op.drop_index('idx_processing_logs_service_name', table_name='processing_logs')
    op.drop_index('idx_processing_logs_post_id', table_name='processing_logs')
    op.drop_index('idx_processing_logs_created_at', table_name='processing_logs')
    op.drop_table('processing_logs')
    op.drop_index('idx_media_files_processed_at', table_name='media_files')
    op.drop_index('idx_media_files_post_id', table_name='media_files')
    op.drop_index('idx_media_files_file_type', table_name='media_files')
    op.drop_table('media_files')
    op.drop_index('idx_posts_velocity_score', table_name='posts')
    op.drop_index('idx_posts_subreddit', table_name='posts')
    op.drop_index('idx_posts_status', table_name='posts')
    op.drop_index('idx_posts_score', table_name='posts')
    op.drop_index('idx_posts_published_at', table_name='posts')
    op.drop_index('idx_posts_created_ts', table_name='posts')
    op.drop_table('posts')
    # ### end Alembic commands ###