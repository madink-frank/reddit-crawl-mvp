#cloud-config
# Cloud-init configuration for Reddit Ghost Publisher application servers

# Update system packages
package_update: true
package_upgrade: true

# Install required packages
packages:
  - curl
  - wget
  - git
  - htop
  - unzip
  - jq
  - fail2ban
  - ufw
  - logrotate
  - cron
  - rsync

# Create application user
users:
  - name: reddit-publisher
    groups: docker, sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${ssh_public_key}

# Configure firewall
runcmd:
  # Configure UFW firewall
  - ufw --force enable
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow ssh
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw allow from 10.10.0.0/16 to any port 22
  
  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Install Docker Compose
  - curl -L "https://github.com/docker/compose/releases/download/v${docker_compose_version}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose
  - ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
  
  # Create application directory
  - mkdir -p /opt/${project_name}
  - chown reddit-publisher:reddit-publisher /opt/${project_name}
  
  # Create log directory
  - mkdir -p /var/log/${project_name}
  - chown reddit-publisher:reddit-publisher /var/log/${project_name}
  
  # Configure log rotation
  - |
    cat > /etc/logrotate.d/${project_name} << EOF
    /var/log/${project_name}/*.log {
        daily
        missingok
        rotate 30
        compress
        delaycompress
        notifempty
        create 644 reddit-publisher reddit-publisher
        postrotate
            /usr/bin/docker-compose -f /opt/${project_name}/docker-compose.prod.yml restart > /dev/null 2>&1 || true
        endscript
    }
    EOF
  
  # Configure system limits
  - |
    cat >> /etc/security/limits.conf << EOF
    reddit-publisher soft nofile 65536
    reddit-publisher hard nofile 65536
    reddit-publisher soft nproc 32768
    reddit-publisher hard nproc 32768
    EOF
  
  # Configure sysctl for better performance
  - |
    cat >> /etc/sysctl.conf << EOF
    # Network performance tuning
    net.core.rmem_max = 16777216
    net.core.wmem_max = 16777216
    net.ipv4.tcp_rmem = 4096 87380 16777216
    net.ipv4.tcp_wmem = 4096 65536 16777216
    net.core.netdev_max_backlog = 5000
    net.ipv4.tcp_congestion_control = bbr
    
    # File system performance
    vm.swappiness = 10
    vm.dirty_ratio = 15
    vm.dirty_background_ratio = 5
    
    # Security
    net.ipv4.conf.all.rp_filter = 1
    net.ipv4.conf.default.rp_filter = 1
    net.ipv4.icmp_echo_ignore_broadcasts = 1
    net.ipv4.icmp_ignore_bogus_error_responses = 1
    net.ipv4.tcp_syncookies = 1
    EOF
  
  # Apply sysctl settings
  - sysctl -p
  
  # Configure automatic security updates
  - |
    cat > /etc/apt/apt.conf.d/20auto-upgrades << EOF
    APT::Periodic::Update-Package-Lists "1";
    APT::Periodic::Unattended-Upgrade "1";
    APT::Periodic::AutocleanInterval "7";
    EOF
  
  # Install monitoring agent (if needed)
  - curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash
  
  # Create deployment script
  - |
    cat > /opt/${project_name}/deploy.sh << 'EOF'
    #!/bin/bash
    set -e
    
    PROJECT_DIR="/opt/${project_name}"
    LOG_FILE="/var/log/${project_name}/deploy.log"
    
    echo "$(date): Starting deployment" >> $LOG_FILE
    
    cd $PROJECT_DIR
    
    # Pull latest code
    if [ -d ".git" ]; then
        git pull origin main >> $LOG_FILE 2>&1
    else
        echo "No git repository found" >> $LOG_FILE
    fi
    
    # Pull latest images
    docker-compose -f docker-compose.prod.yml pull >> $LOG_FILE 2>&1
    
    # Deploy with zero downtime
    docker-compose -f docker-compose.prod.yml up -d --remove-orphans >> $LOG_FILE 2>&1
    
    # Health check
    sleep 30
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo "$(date): Deployment successful" >> $LOG_FILE
    else
        echo "$(date): Deployment failed - health check failed" >> $LOG_FILE
        exit 1
    fi
    EOF
  
  - chmod +x /opt/${project_name}/deploy.sh
  - chown reddit-publisher:reddit-publisher /opt/${project_name}/deploy.sh
  
  # Create backup script
  - |
    cat > /opt/${project_name}/backup.sh << 'EOF'
    #!/bin/bash
    set -e
    
    PROJECT_DIR="/opt/${project_name}"
    BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"
    LOG_FILE="/var/log/${project_name}/backup.log"
    
    echo "$(date): Starting backup" >> $LOG_FILE
    
    mkdir -p $BACKUP_DIR
    cd $PROJECT_DIR
    
    # Backup database
    docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U postgres reddit_publisher > $BACKUP_DIR/postgres.sql
    
    # Backup Redis
    docker-compose -f docker-compose.prod.yml exec -T redis redis-cli BGSAVE
    docker cp $(docker-compose -f docker-compose.prod.yml ps -q redis):/data/dump.rdb $BACKUP_DIR/redis.rdb
    
    # Compress backup
    tar -czf /tmp/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C $BACKUP_DIR .
    
    # Upload to Spaces (if configured)
    # aws s3 cp /tmp/backup-$(date +%Y%m%d-%H%M%S).tar.gz s3://backup-bucket/
    
    # Cleanup
    rm -rf $BACKUP_DIR
    find /tmp -name "backup-*.tar.gz" -mtime +7 -delete
    
    echo "$(date): Backup completed" >> $LOG_FILE
    EOF
  
  - chmod +x /opt/${project_name}/backup.sh
  - chown reddit-publisher:reddit-publisher /opt/${project_name}/backup.sh
  
  # Setup cron jobs
  - |
    cat > /tmp/reddit-publisher-cron << EOF
    # Backup every day at 2 AM
    0 2 * * * /opt/${project_name}/backup.sh
    
    # Health check every 5 minutes
    */5 * * * * curl -f http://localhost/health > /dev/null 2>&1 || echo "Health check failed at $(date)" >> /var/log/${project_name}/health.log
    
    # Log rotation check
    0 0 * * * /usr/sbin/logrotate /etc/logrotate.d/${project_name}
    EOF
  
  - crontab -u reddit-publisher /tmp/reddit-publisher-cron
  - rm /tmp/reddit-publisher-cron
  
  # Configure Docker daemon
  - |
    cat > /etc/docker/daemon.json << EOF
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "3"
      },
      "storage-driver": "overlay2",
      "live-restore": true,
      "userland-proxy": false,
      "experimental": false,
      "metrics-addr": "127.0.0.1:9323",
      "default-ulimits": {
        "nofile": {
          "Name": "nofile",
          "Hard": 65536,
          "Soft": 65536
        }
      }
    }
    EOF
  
  - systemctl restart docker
  
  # Final system update
  - apt-get update && apt-get upgrade -y
  - apt-get autoremove -y
  - apt-get autoclean

# Configure timezone
timezone: UTC

# Configure locale
locale: en_US.UTF-8

# Reboot after setup
power_state:
  delay: "+1"
  mode: reboot
  message: "Rebooting after initial setup"
  timeout: 30
  condition: True